from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Text
from aiogram.types import ContentType
from shazamio.exceptions import FailedDecodeJson

from tgbot.misc.exceptions import RelatedSongsWasNotFound
from tgbot.misc.states import JammyMusicStates

from shazamio import Shazam


async def similar_songs_search(message: types.Message):
    await JammyMusicStates.shazam_recomendation.set()
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä –ú–æ—Ä–≥–µ–Ω—à—Ç–µ—Ä–Ω aristocrat), –∞ —è –ø–æ–ø—Ä–æ–±—É—é "
        "—Ç–µ–±–µ –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –ø–æ—Ö–æ–∂–µ–µ")


async def parse_all_related_tracks_to_text(tracks, shazam: Shazam) -> str:
    all_related_songs = ""
    related_songs_flag = False
    for track in tracks:
        try:
            related_songs = (await shazam.related_tracks(track_id=track["actions"][0]["id"], limit=5))["tracks"]
            if not related_songs_flag and related_songs:
                related_songs_flag = True
            for related_song in related_songs:
                all_related_songs += f"{related_song['subtitle']} - {related_song['title']}\n"
        except (KeyError, FailedDecodeJson):
            continue
    if not related_songs_flag:
        raise RelatedSongsWasNotFound
    return all_related_songs


async def shazam_recommendation_search(message: types.Message, state):
    await state.reset_state()
    shazam = Shazam()
    try:
        tracks = (await shazam.search_track(query=message.text, limit=5)).get("tracks").get("hits")
        if tracks:
            text_message = "<b>–ü–æ—Ö–æ–∂–∏–µ —Ç—Ä–µ–∫–∏:</b>\n"
            text_message += await parse_all_related_tracks_to_text(tracks, shazam)
            text_message += "–ë–æ–ª—å—à–µ –º—É–∑—ã–∫–∏ –Ω–∞ @jammy_music_bot"
            await message.answer(text_message)
        else:
            await message.answer("–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Ç–µ–±–µ –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å")
    except (RelatedSongsWasNotFound, KeyError, AttributeError):
        await message.answer("–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Ç–µ–±–µ –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å")
        return


async def get_unknown_content_to_find_similar(message: types.Message):
    await message.answer("–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç –≤–∞—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞, "
                         "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å –≤ —Ç–æ–º, —á—Ç–æ –≤—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.")


def register_similar_songs_search(dp: Dispatcher):
    dp.register_message_handler(similar_songs_search, Text("üéº –ù–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ —Ç—Ä–µ–∫–∏"),
                                state="*")
    dp.register_message_handler(shazam_recommendation_search, content_types=ContentType.TEXT,
                                state=JammyMusicStates.shazam_recomendation)
    dp.register_message_handler(get_unknown_content_to_find_similar, content_types=ContentType.ANY,
                                state=JammyMusicStates.shazam_recomendation)
