from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Text
from aiogram.types import ContentType

from tgbot.misc.states import JammyMusicStates

from shazamio import Shazam


async def similar_songs_search(message: types.Message):
    await JammyMusicStates.shazam_recomendation.set()
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä –ú–æ—Ä–≥–µ–Ω—à—Ç–µ—Ä–Ω aristocrat), –∞ —è –ø–æ–ø—Ä–æ–±—É—é "
                     "—Ç–µ–±–µ –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –ø–æ—Ö–æ–∂–µ–µ")


async def shazam_recomendation_search(message: types.Message, state):
    await state.reset_state()
    shazam = Shazam()
    try:
        tracks = await shazam.search_track(query=message.text, limit=5)
        print(tracks)
        list = {}
        if tracks:
            count_of_finded_songs = len(tracks['tracks']['hits'])
            for i in range(count_of_finded_songs):
                info = tracks['tracks']['hits'][i]['heading']
                id = int(tracks['tracks']['hits'][i]['actions'][0]['id'])
            try:
                related = await shazam.related_tracks(track_id=id, limit=10)
                tracks = []
                for i in range(10):
                    tracks.append(related['tracks'][i]['subtitle'] + " - " + related['tracks'][i]['title'])
                s = '\n'.join(tracks)
                await message.answer("–ü–æ—Ö–æ–∂–∏–µ —Ç—Ä–µ–∫–∏:" + "\n" + s + "\n" + "–ë–æ–ª—å—à–µ –º—É–∑—ã–∫–∏ –Ω–∞ @jammy_music_bot")
            except Exception:
                await message.answer("–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Ç–µ–±–µ –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å")
        else:
            await message.answer("–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Ç–µ–±–µ –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å")
    except Exception:
        await message.answer("–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Ç–µ–±–µ –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å")


async def get_unknown_content_to_find_similar(message: types.Message):
    await message.answer("–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç –≤–∞—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞, "
                         "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å –≤ —Ç–æ–º, —á—Ç–æ –≤—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.")


def register_similar_songs_search(dp: Dispatcher):
    dp.register_message_handler(similar_songs_search, Text("üéº –ù–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ —Ç—Ä–µ–∫–∏"))
    dp.register_message_handler(similar_songs_search, content_types=ContentType.TEXT,
                                state=JammyMusicStates.shazam_recomendation)
    dp.register_message_handler(get_unknown_content_to_find_similar, content_types=ContentType.ANY,
                                state=JammyMusicStates.shazam_recomendation)
